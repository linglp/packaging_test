name: Publish to Test PyPI
on:
  push:
    tags:
      - '*'
    branches: [main]

jobs:
  test_pypi_release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      # - uses: actions/checkout@v2
      # - uses: actions/setup-python@v2
      # - name: Install Poetry
      #   run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      # - name: Add Poetry to path
      #   run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH
      # - run: poetry install
      #----------------------------------------------
      #       check-out repo and set-up python     
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      #----------------------------------------------
      #          install & configure poetry         
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      #----------------------------------------------
      #       load cached venv if cache exists      
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist 
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        
      #----------------------------------------------
      #    install your root project, if required 
      #----------------------------------------------      
      - name: Install library
        run: poetry install --no-interaction

      #----------------------------------------------
      #    publish to testpypi
      #----------------------------------------------      
      - run: poetry config repositories.testpypi https://test.pypi.org/legacy/
      - run: poetry config pypi-token.testpypi ${{ secrets.TWINE_TEST_TOKEN }}
      - name: Publish package to test Pypi
        run: poetry publish -vvvv --build -r testpypi

      #----------------------------------------------
      #    check tag
      #----------------------------------------------      
      - name: Check Tag
        id: check-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=match::true
          fi
      #----------------------------------------------
      #    publish to pypi
      #----------------------------------------------  
      - name: Publish package to Pypi
        if: steps.check-tag.outputs.match == 'true'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          PYPI_USERNAME: __token__
        run: |
          poetry publish --username $PYPI_USERNAME --password $PYPI_TOKEN
# This is a basic workflow to help you get started with Actions

# name: Test & Upload to TestPyPI

# # Controls when the action will run. 
# on:
#   push:
#     tags:
#       - v*.*.*
#     branches: [main]
#     # branches:
#     #   - main
#     # tags:
#     #    - v*.*.*
#     tags-ignore:        
#       - staging*
#     paths-ignore:
#       - '**/*.md'
#       - '**/.gitignore'
#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2

#       # Sets up python3
#       - uses: actions/setup-python@v2
#         with:
#           python-version: 3.8 

#       # Installs and upgrades pip, installs other dependencies and installs the package from setup.py
#       - name: "Installs and upgrades pip, installs other dependencies and installs the package from setup.py"
#         run: |
#           # Upgrade pip
#           python3 -m pip install --upgrade pip
#           # Install build deps
#           python3 -m pip install setuptools wheel twine
#           # If requirements.txt exists, install from it
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           # Install the package from setup.py
#           python3 setup.py install

#       # Upload to TestPyPI
#       - name: Build and Upload to TestPyPI
#        # if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
#         run: |
#           python3 setup.py sdist bdist_wheel
#           python3 -m twine upload dist/*
#         env:
#           TWINE_USERNAME: __token__
#           TWINE_PASSWORD: ${{ secrets.TWINE_TEST_TOKEN }}
#           TWINE_REPOSITORY: testpypi
